<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">

	<!-- 启用注解 -->
	
	
	<bean name="systemConfig" init-method="getObject" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations" value="classpath:systemConfig.properties" />
		<property name="properties">
			<props>
				<prop key="WEB_ROOT_PATH">${webapp.root}</prop>
			</props>
		</property>
	</bean>



	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />
	<bean class="org.springframework.data.repository.support.DomainClassConverter">
		<constructor-arg ref="conversionService" />
	</bean>

	<mvc:annotation-driven conversion-service="conversionService" validator="validator">
		<mvc:argument-resolvers>
			<!-- Pageable 分页实现请求 -->
			<bean class="org.springframework.data.web.PageableHandlerMethodArgumentResolver" />
		</mvc:argument-resolvers>
		<!-- <mvc:message-converters register-defaults="true"> //将StringHttpMessageConverter的默认编码设为UTF-8 <bean class="org.springframework.http.converter.StringHttpMessageConverter"> <constructor-arg value="UTF-8" /> </bean> //将Jackson2HttpMessageConverter的默认格式化输出设为true <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"> <property name="prettyPrint" value="true" /> </bean> </mvc:message-converters> -->
	</mvc:annotation-driven>
	<!-- 2016年8月3日 15:17:16 ↑ -->

	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter" />
	<bean id="byteArrayHttpMessageConverter" class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
	<bean id="resourceHttpMessageConverter" class="org.springframework.http.converter.ResourceHttpMessageConverter" />
	<bean id="sourceHttpMessageConverter" class="org.springframework.http.converter.xml.SourceHttpMessageConverter" />
	<bean id="mappingJackson2HttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
	<!-- //xml 解析器 <bean id="xmlAwareFormHttpMessageConverter" class="org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter" /> <bean id="jaxb2RootElementHttpMessageConverter" class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" /> <bean id="marshallingHttpMessageConverter" class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter"> <property name="marshaller" ref="castorMarshaller" /> <property name="unmarshaller" ref="castorMarshaller" /> </bean> <bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller" /> -->

	<!-- //请求映射处理适配器 -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<util:list id="beanList">
				<ref bean="stringHttpMessageConverter" />
				<ref bean="byteArrayHttpMessageConverter" />
				<ref bean="resourceHttpMessageConverter" />
				<ref bean="sourceHttpMessageConverter" />
				<ref bean="mappingJackson2HttpMessageConverter" />
				<!-- <ref bean="jaxb2RootElementHttpMessageConverter"/> <ref bean="marshallingHttpMessageConverter" /> <ref bean="xmlAwareFormHttpMessageConverter"/> -->
			</util:list>
		</property>

	</bean>


	<!-- // 注解方法处理适配器 <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> <property name="messageConverters"> <list> <ref bean="byteArray_hmc" /> <ref bean="string_hmc" /> <ref bean="resource_hmc" /> <ref bean="source_hmc" /> <ref bean="xmlAwareForm_hmc" /> <ref bean="jaxb2RootElement_hmc" /> <ref bean="jackson_hmc" /> </list> </property> </bean> -->


	

	<!-- 自动扫描@Controller use-default-filters="false" -->
	<context:component-scan base-package="com.ascbank">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>



	
	<!-- 加载spring配置 分配不同该模块的配置，方便后期单独提取或转变项目格式 <import resource="springContext-configureServlet.xml"/> -->


	<!-- 映射静态文件 -->
	
	 <mvc:view-controller path="/" view-name="/index.html" status-code="200" />
	<mvc:view-controller path="/index**" view-name="/index.html" status-code="200" />
	<mvc:view-controller path="/manage**" view-name="/manage/index.html" status-code="200" />
	<!-- -->
	<!-- 静态资源文件 -->
	<!-- 定义无需Controller的url<->view直接映射 -->
	<!-- 由于web.xml中设置是：由SpringMVC拦截所有请求,于是在读取静态资源文件的时候就会受到影响(说白了就是读不到) -->
	<!-- 经过下面的配置，该标签的作用就是：所有页面中引用"/js/**"的资源，都会从"/resources/js/"里面进行查找 -->
	<!-- 参考: https://github.com/zhangkaitao/spring4-1-showcase/blob/master/spring4.1-resource/src/main/resources/spring-mvc.xml -->
	<!-- 我们可以访问http://IP:8080/xxx/js/my.css和http://IP:8080/xxx/resources/js/my.css对比出来 -->
	<mvc:resources mapping="/public/**" location="/public/" cache-period="31556926" order="1">
		<mvc:resource-chain resource-cache="true">
			<mvc:resolvers>
				<!--
				 <mvc:version-resolver>
					<mvc:content-version-strategy patterns="/**" />
				</mvc:version-resolver>
				 -->
				<bean class="org.springframework.web.servlet.resource.GzipResourceResolver" />
				<bean class="org.springframework.web.servlet.resource.CachingResourceResolver">
					<constructor-arg ref="cache" />
				</bean>
				<!--
				 <bean class="org.springframework.web.servlet.resource.VersionResourceResolver">
					<property name="strategyMap">
						<map>
							<entry key="/**">
								<bean class="org.springframework.web.servlet.resource.ContentVersionStrategy" />
							</entry>
						</map>
					</property>
				</bean>
				 -->
				<bean class="org.springframework.web.servlet.resource.PathResourceResolver" />
			</mvc:resolvers>
			<mvc:transformers>
				<bean class="org.springframework.web.servlet.resource.CachingResourceTransformer">
					<constructor-arg ref="cache" />
				</bean>
				<!-- <bean class="org.springframework.web.servlet.resource.CssLinkResourceTransformer" /> -->
			</mvc:transformers>
		</mvc:resource-chain>
	</mvc:resources>
	<mvc:resources mapping="/img/**" location="/public/img/" cache-period="31556926" order="2" />
	
	<mvc:resources mapping="/**/*.js" location="/WEB-INF/views/" cache-period="31556926" order="3" />
	<mvc:resources mapping="/**/*.css" location="/WEB-INF/views/" cache-period="31556926" order="4" />



	<!-- 配置freeMarker的模板路径 -->
	<!-- //未找到切入点 但不配置会报 org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.web.servlet.view.freemarker.FreeMarkerConfig] is defined -->
	<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/views" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="freemarkerVariables">
			<map><!--设置一些常用的全局变量 -->
				<entry key="webRoot" value="/#{servletContext.servletContextName}" />
				<entry key="publicRoot" value="/#{servletContext.servletContextName}/public" />
			</map>
		</property>
		<property name="freemarkerSettings">
			<props>
				<!-- 刷新模板的周期，单位为秒 -->
				<prop key="template_update_delay">5</prop>
				<!--模板的编码格式 -->
				<prop key="defaultEncoding">UTF-8</prop>
				<!--url编码格式 -->
				<prop key="url_escaping_charset">UTF-8</prop>
				<!--此属性可以防止模板解析空值时的错误 -->
				<prop key="classic_compatible">true</prop>
				<!--该模板所使用的国际化语言环境选项 -->
				<!-- <prop key="locale">zh_CN</prop> -->
				<!--布尔值格式 -->
				<prop key="boolean_format">true,false</prop>
				<!--日期时间格式 -->
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<!--时间格式 -->
				<prop key="time_format">HH:mm:ss</prop>
				<!--数字格式 -->
				<prop key="number_format">0.######</prop>
				<!--自动开启/关闭空白移除，默认为true -->
				<prop key="whitespace_stripping">true</prop>
				<prop key="template_exception_handler">ignore</prop>
			</props>
		</property>
	</bean>

	<!-- <bean id="configFileView" class="com.ascbank.web.servlet.view.GenericFileView" p:contentType="text/plain" p:url="" scope="prototype"/> -->
	<!-- 根据客户端的不同的请求决定不同的 view进行响应, 如 /blog/1.json /blog/1.xml org.springframework.web.servlet.view.ContentNegotiatingViewResolver -->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<!-- <property name="ignoreAcceptHeader" value="true"/> -->
		<!-- <property name="defaultContentType" value="text/html"/> -->
		<property name="order" value="100" />
		<property name="contentNegotiationManager">
			<bean class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
				<!-- 设置为true以忽略对Accept Header的支持 -->
				<property name="ignoreAcceptHeader" value="true" />
				<!-- path扩展名至mimeType的映射,即 /user.json => application/json -->
				<property name="favorPathExtension" value="true" />
				<property name="defaultContentType" value="text/html" />
				<!-- Parameter用于开启 /userinfo/123?format=json 的支持 -->
				<property name="favorParameter" value="true" />
				<!-- favorPathExtension, favorParameter是true时才起作用 -->
				<property name="mediaTypes">
					<map>
						<entry key="html" value="text/html" />
						<entry key="xml" value="application/xml" />
						<entry key="json" value="application/json" />
						<entry key="xls" value="application/vnd.ms-excel" />
						<entry key="js" value="application/javascript" />
					</map>
				</property>
			</bean>
		</property>

		<property name="viewResolvers">
			<list>
				<!-- bean name view resolver -->
				<!-- <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="101" /> -->
				<!-- freemarker视图解析器 -->
				<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver" p:order="102">
					<property name="contentType" value="text/html;charset=UTF-8" />
					<!-- // 此变量值为pageContext.request, 页面使用方法：rc.contextPath -->
					<property name="requestContextAttribute" value="rc" />
					<property name="exposeRequestAttributes" value="true" />
					<property name="exposeSessionAttributes" value="true" />
					<property name="viewNames" value="*.html" />
					<property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
					<property name="cache" value="true" />
					<!-- // 这里需要注意一下，我注释了下面这样一行代码，这行代码的意思就是指引freemarker需要解析的文件的位置。 注释掉原因是因为 applicationContext.xml里有这样一行代码： <property name="templateLoaderPath" value="/WEB-INF/views/" /> 已经指定了视图位置。如果我们这里依然保留下方代码，页面回报406的找不到的错误 -->
				</bean>
				<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 通用解析器 -->
				<!-- <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:order="103"> <property name="prefix" value="/WEB-INF/views/" /> <property name="viewNames" value="*.html,*.js,*.css" /> <property name="viewClass" value="org.springframework.web.servlet.view.InternalResourceView" /> </bean> -->
				<!-- <bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" p:order="103"> <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" /> <property name="viewNames" value="*.html,*.js,*.css" /> <property name="attributesMap"> <map> <entry key="webRoot" value="/#{servletContext.servletContextName}" /> <entry key="publicRoot" value="/#{servletContext.servletContextName}/public" /> </map> </property> <property name="prefix" value="/WEB-INF/views/" /> </bean> -->
				<!-- <bean class="com.ascbank.web.viewresolver.GenericFileViewResolver" p:order="103"> <property name="viewClass" value="com.ascbank.web.servlet.view.GenericFileView" /> <property name="prefix" value="/WEB-INF/views" /> <property name="viewNames" value="*.js,*.css" /> <property name="cache" value="true" /> </bean> -->
				<!-- <bean class="org.springframework.web.servlet.view.ResourceBundleViewResolver" p:order="103"> <property name="basename" value="views" /> <property name="defaultParentView" value="parentView" /> </bean> -->
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
					<!-- <property name="extractValueFromSingleKeyModel" value="true"/> -->
					<property name="prettyPrint" value="true" />
					<!-- <property name="contentType" value="text/plain"/> -->
				</bean>
				<!-- xml视图 <bean class="org.springframework.web.servlet.view.xml.MarshallingView"> <constructor-arg ref="jaxb2Marshaller"/> </bean> -->
			</list>
		</property>
	</bean>

	<!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
	<!-- <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:order="2"> <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" /> <property name="contentType" value="text/html" /> <property name="prefix" value="/WEB-INF/views" /> <property name="suffix" value=".jsp" /> </bean> -->
	<!-- 当上面要访问的静态资源不包括在上面的配置中时，则根据此配置来访问 -->
	<mvc:default-servlet-handler />

	<!--数据验证 以下 validator ConversionService 在使用 mvc:annotation-driven 会 自动注册 -->
	<bean id="validator" lazy-init="false" class="com.ascbank.validator.ReinforceValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>

	<!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
	<!-- 国际化消息 -->
	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="language" />
		</bean>
	</mvc:interceptors>
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找 -->
				<value>classpath:ValidationMesages</value>
				<value>classpath:org/hibernate/validator/ValidationMessages</value>
			</list>
		</property>
		<property name="fileEncodings" value="utf-8" />
		<property name="cacheSeconds" value="120" />
	</bean>
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<property name="cookieName" value="locale" />
		<property name="cookieMaxAge" value="-1" />
		<property name="defaultLocale" value="zh_CN" />
	</bean>
	<!--End 国际化消息 -->



	<!--上传文件设置 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="102400000" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>


	<!--异常处理 -->
	<!-- 将Controller抛出的异常转到特定View, 保持SiteMesh的装饰效果 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">/error/index.html</prop>
				<prop key="javax.servlet.ServletException">/error/index.html</prop>
				<prop key="java.io.FileNotFoundException">/error/index.html</prop>
				<prop key="java.lang.RuntimeException">/error/index.html</prop>
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">/error/index.html</prop>  
			</props>
		</property>
		<property name="statusCodes">
			<props>
				<prop key="error/403">403</prop>
				<prop key="error/404">404</prop>
				<prop key="error/500">500</prop>
			</props>
		</property>
		<!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常页面名作为值 -->
		<property name="defaultErrorView" value="error/500" />
		<!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->
		<property name="warnLogCategory" value="WARN" />
		<!-- 默认HTTP状态码 -->
		<property name="defaultStatusCode" value="500" />
	</bean>

</beans>