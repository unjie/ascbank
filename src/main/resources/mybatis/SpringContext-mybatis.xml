<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" default-lazy-init="true" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
	<!-- MyBatis配置 -->
	<!-- 定义SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描model目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.ascbank.model.*" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:mybatis/map/*Mapper.xml" />
		<property name="plugins">
			<array>
				<bean  class="com.ascbank.myBatis.plugin.SelectPagingPlugin">
					<property name="dialect">
							<bean factory-method="getDialect" class="com.ascbank.repository.modules.persistence.DataSoureInfo" >
								<constructor-arg ref="dataSource" />
							</bean>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ascbank" />
		<property name="annotationClass" value="com.ascbank.repository.mybatis.MyBatisRepository" />
	</bean>

	<!-- 另一个事务管理器, Jdbc单数据源事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 开启注解事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"  order="5"/>

	<!-- 官网给出的 开启注解事务 -->
	<!-- <tx:jta-transaction-manager /> -->


	<!-- ~~~~~~~~~~~~~~~~~~~~old~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> <property name="dataSource" ref="dataSource" /> <property name="typeAliasesPackage"> <value>com.ascbank.*.entity</value> </property> </bean> -->
	<!-- AOP配置数据事务管理，也可以采用注解方式，也可以写在LoggerAspect里面 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> <tx:attributes> <tx:method name="query*" read-only="true" /> <tx:method name="get*" read-only="true" /> <tx:method name="add*" propagation="REQUIRED" /> <tx:method name="insert*" propagation="REQUIRED" /> <tx:method name="delete*" propagation="REQUIRED" /> <tx:method name="update*" propagation="REQUIRED" /> </tx:attributes> </tx:advice> -->

	<!-- 对子类业务逻辑层实施事务 -->
	<!-- <aop:config proxy-target-class="true"> <aop:pointcut id="serviceOperation" expression="execution(* com.ascbank.*.service.impl.*.*(..))" /> <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" /> </aop:config> -->

	<!-- 浏览自动注入mapper的包 -->
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> <property name="basePackage" value="com.ascbank.*.mappers" /> <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /> </bean> -->

	<!--定义事务 -->
	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> <property name="dataSource" ref="dataSource" /> </bean> -->

	<!-- 注解方式的事务拦截器 开启 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" /> -->

</beans>